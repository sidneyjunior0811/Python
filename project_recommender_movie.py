# -*- coding: utf-8 -*-
"""Project_Recommender_Movie.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ALVlNRmO-gOfrTME09sadQBZP862fbZZ
"""

import pandas as pd
import numpy as np
import ast
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise  import cosine_similarity
import streamlit as st

movies = pd.read_csv('/content/drive/MyDrive/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/drive/MyDrive/tmdb_5000_credits.csv')

credits.isnull().sum()

movies.isnull().sum()

movies.head(1)

credits.head(1)

movies = movies.merge(credits, on='title')

movies.head(1)

movies = movies[['movie_id', 'title','overview', 'genres', 'id', 'keywords', 'cast', 'crew']]

movies.head(1)

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

#[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]
#['Action', 'Adventure', 'Fantasy', 'SciFi']

def convert(obj):
  L = []
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies['cast'][0]

def convert3(obj):
  L = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

movies['cast'] = movies['cast'].apply(convert3)

movies['crew'][0]

def fetch_director(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

movies['crew'] = movies['crew'].apply(fetch_director)
# fetch_director(movies['crew'])

movies

movies['overview'][0]

movies['overview'] = movies['overview'].apply(lambda x: x.split())

movies.head()

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ", "")for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ", "") for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ", "") for i in x])

movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

new_df = movies[['movie_id', 'title', 'tags']]

new_df['tags'] = new_df['tags'].apply(lambda x: " ".join(x))

new_df.head()

new_df['tags'][1]

cv = CountVectorizer(max_features=5000, stop_words= 'english')
vectors = cv.fit_transform(new_df['tags']).toarray()

new_df['title'][11]

similarity = cosine_similarity(vectors)

similarity[1]

sorted(list(enumerate(similarity[0])), reverse= True, key = lambda x: x[1])[1:6]

def recommend(movie):
    movie_index = new_df[new_df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse= True, key = lambda x: x[1])[1:6]

    for i in movies_list:
      print(new_df.iloc[i[0]].title)